"use client";

import { ModalWallet, Navbar } from "@/components";
import { useGetCostList } from "@/hooks";
import { IListPengeluaran } from "@/types";
import moment from "moment";
import { NextPage } from "next";
import Head from "next/head";
import { useEffect, useState } from "react";
import { NumericFormat } from "react-number-format";
import _ from "lodash";

const Index: NextPage = () => {
  const getCostList = useGetCostList();
  const { data, isLoading, refetch } = getCostList;
  const [modalOpen, setModalOpen] = useState<boolean>(false);
  const [localForm, setLocalForm] = useState<string>("");

  const dana: number = data?.data?.dana ?? 0;
  const pengeluaran: number = data?.data?.pengeluaran?.reduce(
    (total: number, currentValue: IListPengeluaran) =>
      (total = total + currentValue?.amount),
    0
  )!;
  const total = dana - pengeluaran;

  const pengeluaranPerHari = _(data?.data?.pengeluaran)
    .groupBy((v) => moment(v.date).format("YYYY/MM/DD"))
    .map(function (items, filterDate) {
      return {
        date: filterDate,
        price: _.sumBy(items, "amount"),
      };
    })
    .value();

  useEffect(() => {
    const getLocalForm = localStorage.getItem("token");
    if (getLocalForm !== null) {
      setLocalForm(JSON.parse(getLocalForm!));
    } else {
      setLocalForm("");
    }
  }, []);

  if (localForm === "") {
    return (
      <div className="w-8 h-8 border-[6px] rounded-full border-[#dbdad9] loader"></div>
    );
  }

  return (
    <>
      <Head>
        <title>COST NOTES</title>
        <meta name="description" content="Generated by Create Next Stack." />
      </Head>
      <div className="relative">
        <Navbar
          setModalOpen={() => setModalOpen(!modalOpen)}
          dana={total}
          title={localForm === "" ? "Register" : "My"}
          isLogin={localForm === "" ? false : true}
        />

        <div className="flex flex-col items-center justify-center w-5/6 mx-auto mt-7 md:mt-10 md:flex-row md: md:p-5">
          {isLoading ? (
            <div className="w-8 h-8 border-[6px] rounded-full border-[#dbdad9] loader"></div>
          ) : (
            <div className="w-full mt-10 lg:w-3/4 h-max md:mt-2">
              <div className="grid grid-cols-2 gap-5 md:grid-cols-5 lg:grid-cols-6">
                {pengeluaranPerHari
                  ?.reverse()
                  ?.slice(0, 30)
                  ?.map((e: any, idx: number) => (
                    <div
                      className={`p-3 text-center rounded-md shadow-md ${
                        e.price <= 50000
                          ? "bg-lime-300"
                          : "bg-rose-600 text-white"
                      }`}
                      key={idx}
                    >
                      <h1 className="text-xs">
                        {moment(e.date, "YYYY/MM/DD").format("MMM, YYYY")}
                      </h1>
                      <h2 className="text-2xl font-bold">
                        {moment(e.date, "YYYY/MM/DD").format("DD")}
                      </h2>
                      <NumericFormat
                        className="mt-2 text-xs"
                        value={e.price}
                        prefix="Rp. "
                        displayType="text"
                        thousandSeparator="."
                        decimalSeparator=","
                      />
                    </div>
                  ))}
              </div>
            </div>
          )}
        </div>
        {modalOpen ? (
          <ModalWallet
            setModalOpen={() => setModalOpen(!modalOpen)}
            refetch={() => refetch()}
            isLogin={localForm === "" ? false : true}
          />
        ) : null}
      </div>
    </>
  );
};

export default Index;
