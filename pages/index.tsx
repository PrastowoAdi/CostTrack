"use client";

import { LoginForm, Navbar, ModalWallet } from "@/components";
import { useAddPengeluaran, useGetCostList } from "@/hooks";
import { IListPengeluaran } from "@/types";
import moment from "moment";
import { NextPage } from "next";
import Head from "next/head";
import { useCallback, useEffect, useState } from "react";
import { NumericFormat } from "react-number-format";
import "moment/locale/id";
import { toast } from "react-toastify";

const Index: NextPage = () => {
  const mutation = useAddPengeluaran();
  const getCostList = useGetCostList();
  const { data, isLoading, refetch } = getCostList;

  const [amount, setAmount] = useState<string>("");
  const [desc, setDesc] = useState<string>("");
  const [modalOpen, setModalOpen] = useState<boolean>(false);
  const [localForm, setLocalForm] = useState<string>("");
  const [isLoadingBtn, setIsLoadingBtn] = useState<boolean>(false);

  const dana: number = data?.data?.dana ?? 0;
  const pengeluaran: number = data?.data?.pengeluaran?.reduce(
    (total: number, currentValue: IListPengeluaran) =>
      (total = total + currentValue?.amount),
    0
  )!;
  const total = dana - pengeluaran;

  useEffect(() => {
    const getLocalForm = localStorage.getItem("token");
    if (getLocalForm !== null) {
      setLocalForm(JSON.parse(getLocalForm!));
    } else {
      setLocalForm("");
    }
  }, []);

  const onSubmit = useCallback(() => {
    const pengeluaranList: IListPengeluaran[] = data?.data?.pengeluaran?.map(
      (e: any) => e
    )!;
    const tempPengeluaran = [
      ...pengeluaranList,
      {
        desc,
        amount: Number(amount),
        date: new Date(),
      },
    ];
    try {
      setIsLoadingBtn(true);
      mutation.mutate(
        {
          pengluaran: tempPengeluaran,
        },
        {
          onSuccess(data) {
            if (data) {
              refetch();
              toast.success(data.data.message);
              setDesc("");
              setAmount("");
              setIsLoadingBtn(false);
            }
          },
          onError(err: any) {
            toast.error(err.response.data.message);
            setIsLoadingBtn(false);
          },
        }
      );
    } catch (error) {
      console.log("err.submit", error);
      setIsLoadingBtn(false);
    }
  }, [
    mutation,
    refetch,
    setDesc,
    setAmount,
    amount,
    data?.data?.pengeluaran,
    desc,
  ]);

  return (
    <>
      <Head>
        <title>COST NOTES</title>
        <meta name="description" content="Generated by Create Next Stack." />
      </Head>
      <div className="relative">
        <Navbar
          setModalOpen={() => setModalOpen(!modalOpen)}
          dana={total}
          title={localForm === "" ? "Register" : "My"}
          isLogin={localForm === "" ? false : true}
        />
        {localForm === "" ? (
          <LoginForm />
        ) : (
          <div className="flex flex-col items-center justify-center w-5/6 mx-auto mt-7 md:mt-10 md:flex-row md: md:p-5">
            {isLoading ? (
              <div className="w-8 h-8 border-[6px] rounded-full border-[#dbdad9] loader"></div>
            ) : (
              <>
                {/* SECTION LEFT */}
                <div className="w-full mb-5 md:w-1/3">
                  <div className="mb-3 text-gray-700">
                    <label className="block mb-1 text-sm">Description</label>
                    <input
                      className="w-full h-10 px-3 text-sm placeholder-gray-600 border rounded-lg focus:shadow-outline "
                      type="text"
                      placeholder="Description"
                      value={desc}
                      onChange={(e) => setDesc(e.target.value)}
                    />
                  </div>
                  <div className="text-gray-700 mb-7">
                    <label className="block mb-1 text-sm">Amount</label>
                    <NumericFormat
                      type="text"
                      className="w-full h-10 px-3 text-sm placeholder-gray-600 border rounded-lg focus:shadow-outline"
                      placeholder="Amount"
                      value={amount}
                      thousandsGroupStyle="thousand"
                      thousandSeparator=","
                      prefix={"Rp. "}
                      onValueChange={(e) => setAmount(e.value)}
                    />
                  </div>
                  {isLoadingBtn ? (
                    <div className="w-8 h-8 border-[6px] rounded-full border-[#dbdad9] loader"></div>
                  ) : (
                    <button
                      className="px-6 py-2 font-semibold text-slate-950 bg-[#F7F7F9] rounded hover:bg-[#CDDFEE]/80 text-sm"
                      onClick={onSubmit}
                    >
                      Submit
                    </button>
                  )}
                </div>

                {/* SECTION RIGHT */}
                <div className="w-full md:flex-1">
                  <div className="w-full mx-auto bg-white shadow-md md:w-2/3">
                    <div className="flex justify-between px-2 py-1 border-t-2">
                      <div className="">
                        <h1 className="text-sm">Dana</h1>
                      </div>
                      <div className="">
                        <NumericFormat
                          className="text-sm text-blue-500"
                          value={dana}
                          prefix="Rp. "
                          displayType="text"
                          thousandSeparator="."
                          decimalSeparator=","
                        />
                      </div>
                    </div>
                    <div className="flex justify-between px-2 py-1">
                      <div className="">
                        <h1 className="text-sm">Pengeluaran</h1>
                      </div>
                      <div className="">
                        <NumericFormat
                          className="text-sm text-rose-500"
                          value={data?.data?.pengeluaran?.reduce(
                            (total: number, currentValue: IListPengeluaran) =>
                              (total = total + currentValue?.amount),
                            0
                          )}
                          prefix="Rp. "
                          displayType="text"
                          thousandSeparator="."
                          decimalSeparator=","
                        />
                      </div>
                    </div>
                    <div className="flex justify-between px-2 py-2">
                      <div className="">
                        <h1 className="text-sm font-semibold">Total</h1>
                      </div>
                      <div className="">
                        <NumericFormat
                          className="text-sm"
                          value={total}
                          prefix="Rp. "
                          displayType="text"
                          thousandSeparator="."
                          decimalSeparator=","
                        />
                      </div>
                    </div>
                  </div>
                  <div className="w-full md:w-2/3 mx-auto bg-[#F7F7F9] h-[200px] md:h-[450px] overflow-y-scroll border-b-2">
                    {data?.data?.pengeluaran?.map(
                      (e: IListPengeluaran, idx: number) => (
                        <div
                          className="px-2 py-4 mt-5 bg-white shadow-md"
                          key={idx}
                        >
                          <h1 className="mb-2 text-sm">{e.desc}</h1>
                          <hr />
                          <div className="flex items-center justify-between py-1">
                            <div className="flex gap-3">
                              <h1 className="text-3xl font-light tracking-widest">
                                {moment(e.date).format("DD")}
                              </h1>
                              <h2 className="text-xs font-light">
                                {moment(e.date).format("dddd, MMMM YYYY")}
                              </h2>
                            </div>
                            <div className="text-rose-500">
                              <NumericFormat
                                className="text-sm"
                                value={e.amount}
                                prefix="Rp. "
                                displayType="text"
                                thousandSeparator="."
                                decimalSeparator=","
                              />
                            </div>
                          </div>
                          <p className="text-xs italic text-gray-400">
                            {moment(e.date).fromNow()}
                          </p>
                        </div>
                      )
                    )}
                  </div>
                </div>
              </>
            )}
          </div>
        )}
        {modalOpen ? (
          <ModalWallet
            setModalOpen={() => setModalOpen(!modalOpen)}
            refetch={() => refetch()}
            isLogin={localForm === "" ? false : true}
          />
        ) : null}
      </div>
    </>
  );
};

export default Index;
